/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,15],$V1=[1,26],$V2=[1,17],$V3=[1,23],$V4=[1,24],$V5=[1,25],$V6=[1,27],$V7=[1,21],$V8=[1,19],$V9=[1,20],$Va=[1,18],$Vb=[1,22],$Vc=[5,19,24,31,38,39,40,41,43,45,50,52,53,56,57,60,66],$Vd=[2,36],$Ve=[1,37],$Vf=[1,39],$Vg=[1,40],$Vh=[1,42],$Vi=[1,44],$Vj=[5,19,23,24,31,38,39,40,41,43,45,50,52,53,56,57,59,60,65,66,73,74,75,76,77],$Vk=[1,55],$Vl=[1,62],$Vm=[1,54],$Vn=[1,53],$Vo=[1,57],$Vp=[1,58],$Vq=[1,59],$Vr=[1,60],$Vs=[1,61],$Vt=[1,76],$Vu=[1,80],$Vv=[1,81],$Vw=[1,84],$Vx=[1,85],$Vy=[1,82],$Vz=[1,83],$VA=[1,86],$VB=[1,87],$VC=[1,88],$VD=[17,28,37,46,58,59,63,64,65,67,68,69,70,71],$VE=[17,28],$VF=[17,42],$VG=[24,28,38,39,40,41],$VH=[17,28,37,46,58,59,63,64,65,69,70],$VI=[17,28,37,46,58,59,63,64,65,67,68,69,70],$VJ=[17,28,37,46,63,64,65,69,70];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"INSTRUCCIONES":4,"EOF":5,"INSTRUCCION":6,"MAIN":7,"DECLARACION":8,"CLASE":9,"METODO_FUNCION":10,"ASIGNACION":11,"IF":12,"DO_WHILE":13,"WHILE":14,"FOR":15,"INCREMENTODECREMENTO":16,"pcoma":17,"PRINT":18,"public_":19,"static_":20,"void_":21,"main_":22,"parAbre":23,"string_":24,"corAbre":25,"corCierra":26,"EXPRESION":27,"parCierra":28,"BS_GENERAL":29,"class_":30,"identificador":31,"TIPO_RETORNO":32,"V_PARAMETROS":33,"BS_RETORNO":34,"TIPO":35,"PARAMETRO":36,"coma":37,"int_":38,"double_":39,"char_":40,"boolean_":41,"llaveAbre":42,"llaveCierra":43,"RETURN":44,"return_":45,"igual":46,"COMENTARIO":47,"comentariom":48,"comentariou":49,"for_":50,"BS_CICLO":51,"do_":52,"while_":53,"CONDICION":54,"BREAK_CONTINUE":55,"break_":56,"continue_":57,"mas":58,"menos":59,"if_":60,"else_":61,"ELSE":62,"mayorQ":63,"menorQ":64,"not_":65,"print_":66,"por":67,"division":68,"or_":69,"and_":70,"xor_":71,"PRIMITIVO":72,"decimal":73,"entero":74,"cadena":75,"true_":76,"false_":77,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",17:"pcoma",19:"public_",20:"static_",21:"void_",22:"main_",23:"parAbre",24:"string_",25:"corAbre",26:"corCierra",28:"parCierra",30:"class_",31:"identificador",37:"coma",38:"int_",39:"double_",40:"char_",41:"boolean_",42:"llaveAbre",43:"llaveCierra",45:"return_",46:"igual",48:"comentariom",49:"comentariou",50:"for_",52:"do_",53:"while_",56:"break_",57:"continue_",58:"mas",59:"menos",60:"if_",61:"else_",63:"mayorQ",64:"menorQ",65:"not_",66:"print_",67:"por",68:"division",69:"or_",70:"and_",71:"xor_",73:"decimal",74:"entero",75:"cadena",76:"true_",77:"false_"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,1],[7,11],[9,4],[10,7],[10,7],[32,1],[32,1],[33,2],[33,1],[36,2],[36,3],[35,1],[35,1],[35,1],[35,1],[35,1],[34,3],[34,4],[44,3],[11,4],[8,5],[8,5],[8,1],[8,2],[47,1],[47,1],[15,8],[13,5],[14,3],[51,3],[51,4],[55,2],[55,2],[16,3],[16,3],[12,3],[12,5],[12,5],[12,7],[62,1],[62,2],[54,6],[54,6],[54,6],[54,6],[54,3],[29,3],[18,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,2],[27,2],[27,3],[27,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
var root = new AST($$[$0-1]);	return root;
break;
case 2:
$$[$0-1].push($$[$0]); this.$ = $$[$0-1];
break;
case 3:
this.$ = [$$[$0]];
break;
case 4: case 5: case 6: case 7: case 8: case 9: case 10: case 11: case 12: case 14: case 19: case 20: case 74:
 this.$ = $$[$0]; 
break;
case 13: case 30: case 43: case 59: case 60: case 73:
 this.$ = $$[$0-1]; 
break;
case 15:
 this.$ = new FMain($$[$0], null, this._$.first_line, this._$.first_column); 
break;
case 16:
 this.$ = new Clase($$[$0-1], $$[$0], this._$.first_line, this._$.first_column); 
break;
case 17:
 this.$ = new MetodoFuncion($$[$0-4], $$[$0-2], this._$.first_line, this._$.first_column); 
break;
case 18:
 this.$ = new MetodoFuncionSentencia($$[$0-4], $$[$0-2], $$[$0], this._$.first_line, this._$.first_column); 
break;
case 21:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 22:
 this.$ = [$$[$0]] 
break;
case 23:
 this.$ = new Parametro($$[$0-1], $$[$0], this._$.first_line, this._$.first_column); 
break;
case 24:
 this.$ = new Parametro($$[$0-2], $$[$0-1], this._$.first_line, this._$.first_column); 
break;
case 25:
 this.$ = Type.INT; 
break;
case 26:
 this.$ = Type.DOUBLE; 
break;
case 27:
 this.$ = Type.CHAR; 
break;
case 28:
 this.$ = Type.STRING; 
break;
case 29:
 this.$ = Type.BOOLEAN; 
break;
case 31: case 44:
 this.$ = $$[$0-2].concat($$[$0-1]); 
break;
case 32:
 this.$ = new Return($$[$0-1], this._$.first_line, this._$.first_column); 
break;
case 33:
 this.$ = new Asignacion($$[$0-3], $$[$0-1], this._$.first_line, this._$.first_column); 
break;
case 34: case 35:
 this.$ = new Declaracion($$[$0-4], $$[$0-3], $$[$0-1], this._$.first_line, this._$.first_column); 
break;
case 36:
 this.$ = new Declaracion($$[$0], $$[$01], $$[$03], this._$.first_line, this._$.first_column); 
break;
case 37:
 this.$ = new Declaracion($$[$0-1], $$[$0], $$[$02], this._$.first_line, this._$.first_column); 
break;
case 38:
 this.$ = new Comentario($$[$0], this._$.first_line, this._$.first_column); 
break;
case 39:
 this.$ = new Comentario($$[$0],this._$.first_line, this._$.first_column); 
break;
case 40:
 this.$ = new For($$[$0-5], $$[$0-4], $$[$0-2], $$[$0], this._$.first_line, this._$.first_column); 
break;
case 41:
 this.$ = new DoWhile($$[$0-1], $$[$0-3], this._$.first_line, this._$.first_column); 
break;
case 42:
 this.$ = new While($$[$0-1], $$[$0], this._$.first_line, this._$.first_column); 
break;
case 45: case 46:
 this.$ = new Break_Continue($$[$0-1], this._$.first_line, this._$.first_column); 
break;
case 47: case 48:
 this.$ = new Adicion_Sustraccion($$[$0-2], $$[$0-1], $$[$0], this._$.first_line, this._$.first_column); 
break;
case 49:
 this.$ = new If($$[$0-1], $$[$0], null, this._$.first_line, this._$.first_column); 
break;
case 50:
 this.$ = new If($$[$0-3], $$[$0-2], $$[$0], this._$.first_line, this._$.first_column); 
break;
case 51:
 this.$ = new If_Iterativo($$[$0-3], $$[$0-2], $$[$0], this._$.first_line, this._$.first_column); 
break;
case 52:
 this.$ = new If($$[$0-5], null, null, this._$.first_line, this._$.first_column); 
break;
case 53:
 this.$ = new Else($$[$0], this._$.first_line, this._$.first_column); 
break;
case 54:
 this.$ = null; 
break;
case 55:
 this.$ = new OperacionRelacional( TypeOperation.MAYOR_IGUAL, $$[$0-4], $$[$0-1], this._$.first_line, this._$.first_column); 
break;
case 56:
 this.$ = new OperacionRelacional( TypeOperation.MENOR_IGUAL, $$[$0-4], $$[$0-1], this._$.first_line, this._$.first_column); 
break;
case 57:
 this.$ = new OperacionRelacional( TypeOperation.IGUAL_IGUAL, $$[$0-4], $$[$0-1], this._$.first_line, this._$.first_column); 
break;
case 58:
 this.$ = new OperacionRelacional( TypeOperation.DIFERENTE, $$[$0-4], $$[$0-1], this._$.first_line, this._$.first_column); 
break;
case 61:
 this.$ = new Print( $$[$0-1], this._$.first_line, this._$.first_column); 
break;
case 62:
 this.$ = new OperacionAritmetica( TypeOperation.SUMA, $$[$0-2], $$[$0], this._$.first_line, this._$.first_column); 
break;
case 63:
 this.$ = new OperacionAritmetica( TypeOperation.RESTA, $$[$0-2], $$[$0], this._$.first_line, this._$.first_column); 
break;
case 64:
 this.$ = new OperacionAritmetica( TypeOperation.MULTIPLICACION, $$[$0-2], $$[$0], this._$.first_line, this._$.first_column); 
break;
case 65:
 this.$ = new OperacionAritmetica( TypeOperation.DIVISION, $$[$0-2], $$[$0], this._$.first_line, this._$.first_column); 
break;
case 66:
 this.$ = new OperacionRelacional( TypeOperation.MAYOR, $$[$0-2], $$[$0], this._$.first_line, this._$.first_column); 
break;
case 67:
 this.$ = new OperacionRelacional( TypeOperation.MENOR, $$[$0-2], $$[$0], this._$.first_line, this._$.first_column); 
break;
case 68:
 this.$ = new OperacionLogica( TypeOperation.OR, $$[$0-2], $$[$0], this._$.first_line, this._$.first_column); 
break;
case 69:
 this.$ = new OperacionLogica( TypeOperation.AND, $$[$0-2], $$[$0], this._$.first_line, this._$.first_column); 
break;
case 70:
 this.$ = new OperacionLogica( TypeOperation.XOR, $$[$0-2], $$[$0], this._$.first_line, this._$.first_column); 
break;
case 71:
 this.$ = new OperacionLogica( TypeOperation.NOT, $$[$0], null, this._$.first_line, this._$.first_column); 
break;
case 72:
 this.$ = new OperacionAritmetica( TypeOperation.MENOSUNARIO, $$[$0], null, this._$.first_line, this._$.first_column); 
break;
case 75: case 76: case 77:
 this.$ = new Primitivo( $$[$0], this._$.first_line, this._$.first_column); 
break;
case 78:
 this.$ = new Primitivo( true, this._$.first_line, this._$.first_column); 
break;
case 79:
 this.$ = new Primitivo( false, this._$.first_line, this._$.first_column); 
break;
case 80:
 this.$ = new Identificador( $$[$0], this._$.first_line, this._$.first_column); 
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,18:14,19:$V0,24:$V1,31:$V2,35:16,38:$V3,39:$V4,40:$V5,41:$V6,50:$V7,52:$V8,53:$V9,60:$Va,66:$Vb},{1:[3]},{5:[1,28],6:29,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,18:14,19:$V0,24:$V1,31:$V2,35:16,38:$V3,39:$V4,40:$V5,41:$V6,50:$V7,52:$V8,53:$V9,60:$Va,66:$Vb},o($Vc,[2,3]),o($Vc,[2,4]),o($Vc,[2,5]),o($Vc,[2,6]),o($Vc,[2,7]),o($Vc,[2,8]),o($Vc,[2,9]),o($Vc,[2,10]),o($Vc,[2,11]),o($Vc,[2,12]),{17:[1,30]},o($Vc,[2,14]),{20:[1,31],21:[1,34],24:$V1,30:[1,32],32:33,35:35,38:$V3,39:$V4,40:$V5,41:$V6},{31:[1,36]},o($Vc,$Vd,{37:$Ve,46:[1,38],58:$Vf,59:$Vg}),{23:$Vh,54:41},{42:$Vi,51:43},{23:$Vh,54:45},{23:[1,46]},{23:$Vh,54:47},{31:[2,25]},{31:[2,26]},{31:[2,27]},{31:[2,28]},{31:[2,29]},{1:[2,1]},o($Vc,[2,2]),o($Vc,[2,13]),{21:[1,48]},{31:[1,49]},{31:[1,50]},{31:[2,19]},{31:[2,20]},{46:[1,51]},o($Vj,[2,37]),{23:$Vk,27:52,31:$Vl,59:$Vm,65:$Vn,72:56,73:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs},{58:[1,63]},{59:[1,64]},{29:65,42:[1,66]},{23:$Vk,27:67,31:$Vl,59:$Vm,65:$Vn,72:56,73:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs},{53:[1,68]},{4:69,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,18:14,19:$V0,24:$V1,31:$V2,35:16,38:$V3,39:$V4,40:$V5,41:$V6,50:$V7,52:$V8,53:$V9,60:$Va,66:$Vb},{42:$Vi,51:70},{8:71,24:$V1,31:[1,72],35:16,38:$V3,39:$V4,40:$V5,41:$V6},{17:[1,73]},{22:[1,74]},{29:75,42:$Vt},{23:[1,77]},{23:$Vk,27:78,31:$Vl,59:$Vm,65:$Vn,72:56,73:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs},{17:[1,79],58:$Vu,59:$Vv,63:$Vw,64:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC},{23:$Vk,27:89,31:$Vl,59:$Vm,65:$Vn,72:56,73:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs},{23:$Vk,27:90,31:$Vl,59:$Vm,65:$Vn,72:56,73:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs},{23:$Vk,27:91,31:$Vl,59:$Vm,65:$Vn,72:56,73:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs},o($VD,[2,74]),o($VD,[2,75]),o($VD,[2,76]),o($VD,[2,77]),o($VD,[2,78]),o($VD,[2,79]),o($VD,[2,80]),o($VE,[2,47]),o($VE,[2,48]),o($Vc,[2,49],{61:[1,92]}),{4:94,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,18:14,19:$V0,24:$V1,31:$V2,35:16,38:$V3,39:$V4,40:$V5,41:$V6,43:[1,93],50:$V7,52:$V8,53:$V9,60:$Va,66:$Vb},{28:[1,99],46:[1,97],58:$Vu,59:$Vv,63:[1,95],64:[1,96],65:[1,98],67:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC},{23:$Vh,54:100},{6:29,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,18:14,19:$V0,24:$V1,31:$V2,35:16,38:$V3,39:$V4,40:$V5,41:$V6,43:[1,101],50:$V7,52:$V8,53:$V9,55:102,56:[1,103],57:[1,104],60:$Va,66:$Vb},o($Vc,[2,42]),{23:$Vk,27:105,31:$Vl,59:$Vm,65:$Vn,72:56,73:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs},o([23,31,59,65,73,74,75,76,77],$Vd,{37:$Ve}),o($Vc,[2,61]),{23:[1,106]},o($Vc,[2,16]),{4:94,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,18:14,19:$V0,24:$V1,31:$V2,35:16,38:$V3,39:$V4,40:$V5,41:$V6,50:$V7,52:$V8,53:$V9,60:$Va,66:$Vb},{24:$V1,33:107,35:109,36:108,38:$V3,39:$V4,40:$V5,41:$V6},{17:[1,110],37:[1,111],58:$Vu,59:$Vv,63:$Vw,64:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC},o($Vc,[2,33]),{23:$Vk,27:112,31:$Vl,59:$Vm,65:$Vn,72:56,73:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs},{23:$Vk,27:113,31:$Vl,59:$Vm,65:$Vn,72:56,73:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs},{23:$Vk,27:114,31:$Vl,59:$Vm,65:$Vn,72:56,73:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs},{23:$Vk,27:115,31:$Vl,59:$Vm,65:$Vn,72:56,73:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs},{23:$Vk,27:116,31:$Vl,59:$Vm,65:$Vn,72:56,73:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs},{23:$Vk,27:117,31:$Vl,59:$Vm,65:$Vn,72:56,73:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs},{23:$Vk,27:118,31:$Vl,59:$Vm,65:$Vn,72:56,73:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs},{23:$Vk,27:119,31:$Vl,59:$Vm,65:$Vn,72:56,73:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs},{23:$Vk,27:120,31:$Vl,59:$Vm,65:$Vn,72:56,73:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs},o($VD,[2,71]),o($VD,[2,72]),{28:[1,121],58:$Vu,59:$Vv,63:$Vw,64:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC},{12:123,29:124,42:[1,125],60:$Va,62:122},{61:[1,126]},{6:29,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,18:14,19:$V0,24:$V1,31:$V2,35:16,38:$V3,39:$V4,40:$V5,41:$V6,43:[1,127],50:$V7,52:$V8,53:$V9,60:$Va,66:$Vb},{23:$Vk,27:116,31:$Vl,46:[1,128],59:$Vm,65:$Vn,72:56,73:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs},{23:$Vk,27:117,31:$Vl,46:[1,129],59:$Vm,65:$Vn,72:56,73:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs},{46:[1,130]},{46:[1,131]},o($VF,[2,59]),{17:[1,132]},o($Vc,[2,43]),{43:[1,133]},{17:[1,134]},{17:[1,135]},{17:[1,136],58:$Vu,59:$Vv,63:$Vw,64:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC},{24:[1,137]},{24:$V1,28:[1,138],35:109,36:139,38:$V3,39:$V4,40:$V5,41:$V6},o($VG,[2,22]),{31:[1,140]},o($Vj,[2,34]),o($Vj,[2,35]),o($VH,[2,62],{67:$Vy,68:$Vz,71:$VC}),o($VH,[2,63],{67:$Vy,68:$Vz,71:$VC}),o($VI,[2,64],{71:$VC}),o($VI,[2,65],{71:$VC}),o($VJ,[2,66],{58:$Vu,59:$Vv,67:$Vy,68:$Vz,71:$VC}),o($VJ,[2,67],{58:$Vu,59:$Vv,67:$Vy,68:$Vz,71:$VC}),o([17,28,37,46,65,69],[2,68],{58:$Vu,59:$Vv,63:$Vw,64:$Vx,67:$Vy,68:$Vz,70:$VB,71:$VC}),o([17,28,37,46,65,69,70],[2,69],{58:$Vu,59:$Vv,63:$Vw,64:$Vx,67:$Vy,68:$Vz,71:$VC}),o($VD,[2,70]),o($VD,[2,73]),o($Vc,[2,50]),o($Vc,[2,51]),o($Vc,[2,53]),{4:94,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,18:14,19:$V0,24:$V1,31:$V2,35:16,38:$V3,39:$V4,40:$V5,41:$V6,43:[1,141],50:$V7,52:$V8,53:$V9,60:$Va,66:$Vb},{42:[1,142]},o([5,19,24,31,38,39,40,41,43,45,50,52,53,56,57,60,61,66],[2,60]),{23:$Vk,27:143,31:$Vl,59:$Vm,65:$Vn,72:56,73:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs},{23:$Vk,27:144,31:$Vl,59:$Vm,65:$Vn,72:56,73:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs},{23:$Vk,27:145,31:$Vl,59:$Vm,65:$Vn,72:56,73:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs},{23:$Vk,27:146,31:$Vl,59:$Vm,65:$Vn,72:56,73:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs},o($Vc,[2,41]),o($Vc,[2,44]),{43:[2,45]},{43:[2,46]},{16:147,31:[1,148]},{25:[1,149]},{17:[1,150],34:151,42:[1,152]},o($VG,[2,21]),o($VG,[2,23],{37:[1,153]}),o($Vc,[2,54]),{43:[1,154]},{28:[1,155],58:$Vu,59:$Vv,63:$Vw,64:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC},{28:[1,156],58:$Vu,59:$Vv,63:$Vw,64:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC},{28:[1,157],58:$Vu,59:$Vv,63:$Vw,64:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC},{28:[1,158],58:$Vu,59:$Vv,63:$Vw,64:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC},{28:[1,159]},{58:$Vf,59:$Vg},{26:[1,160]},o($Vc,[2,17]),o($Vc,[2,18]),{4:161,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,18:14,19:$V0,24:$V1,31:$V2,35:16,38:$V3,39:$V4,40:$V5,41:$V6,50:$V7,52:$V8,53:$V9,60:$Va,66:$Vb},o($VG,[2,24]),o($Vc,[2,52]),o($VF,[2,55]),o($VF,[2,56]),o($VF,[2,57]),o($VF,[2,58]),{42:$Vi,51:162},{23:$Vk,27:163,31:$Vl,59:$Vm,65:$Vn,72:56,73:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs},{6:29,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,18:14,19:$V0,24:$V1,31:$V2,35:16,38:$V3,39:$V4,40:$V5,41:$V6,43:[1,164],44:165,45:[1,166],50:$V7,52:$V8,53:$V9,60:$Va,66:$Vb},o($Vc,[2,40]),{28:[1,167],58:$Vu,59:$Vv,63:$Vw,64:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC},o($Vc,[2,30]),{43:[1,168]},{23:$Vk,27:169,31:$Vl,59:$Vm,65:$Vn,72:56,73:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs},{29:170,42:$Vt},o($Vc,[2,31]),{17:[1,171],58:$Vu,59:$Vv,63:$Vw,64:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC},o($Vc,[2,15]),{43:[2,32]}],
defaultActions: {23:[2,25],24:[2,26],25:[2,27],26:[2,28],27:[2,29],28:[2,1],34:[2,19],35:[2,20],134:[2,45],135:[2,46],171:[2,32]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

	const { Instruccion } = require("../dist/ast/Instruccion");
	const { AST } = require("../dist/ast/AST");
	const { FMain } = require("../dist/ast/instrucciones/FMain");
	const { Clase } = require("../dist/ast/instrucciones/Clase");
	const { MetodoFuncion } = require("../dist/ast/instrucciones/MetodoFuncion");
	const { MetodoFuncionSentencia } = require("../dist/ast/instrucciones/MetodoFuncionSentencia");
	const { Parametro } = require("../dist/ast/instrucciones/Parametro");
	const { Return } = require("../dist/ast/instrucciones/Return");
	const { Asignacion } = require("../dist/ast/instrucciones/Asignacion");	
	const { Declaracion } = require("../dist/ast/instrucciones/Declaracion");
	const { Comentario } = require("../dist/ast/instrucciones/Comentario");
	const { Break_Continue } = require("../dist/ast/instrucciones/Break_Continue");
	const { Print } = require("../dist/ast/instrucciones/Print");
	const { If } = require("../dist/ast/instrucciones/If");
	const { If_Iterativo } = require("../dist/ast/instrucciones/If_Iterativo");
	const { Else } = require("../dist/ast/instrucciones/Else");
	const { DoWhile } = require("../dist/ast/instrucciones/DoWhile");
	const { While } = require("../dist/ast/instrucciones/While");
	const { For } = require("../dist/ast/instrucciones/For");
	const { Adicion_Sustraccion } = require("../dist/ast/instrucciones/Adicion_Sustraccion");
	const { OperacionAritmetica } = require("../dist/ast/expresiones/OperacionAritmetica");
	const { OperacionLogica } = require("../dist/ast/expresiones/OperacionLogica");
	const { OperacionRelacional } = require("../dist/ast/expresiones/OperacionRelacional");
	const { Identificador } = require("../dist/ast/expresiones/Identificador");
	const { Primitivo } = require("../dist/ast/expresiones/Primitivo");
	const { Type } = require("../dist/ast/Tipo");
	const { TypeOperation } = require("../dist/ast/Tipo");
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0://ignorando los espacios en blanco
break;
case 1:return 49 /* ignora comentario de una sola linea */
break;
case 2:return 48	/* ignora comentarios Multilinea*/
break;
case 3:return 19;
break;
case 4:return 20;
break;
case 5:return 22;
break;
case 6:return 30;
break;
case 7:return 'interface_';
break;
case 8:return 21;
break;
case 9:return 38;
break;
case 10:return 39;
break;
case 11:return 40;
break;
case 12:return 24;
break;
case 13:return 41;
break;
case 14:return 56;
break;
case 15:return 57;
break;
case 16:return 45;
break;
case 17:return 66;
break;
case 18:return 52;
break;
case 19:return 53;
break;
case 20:return 50;
break;
case 21:return 60;
break;
case 22:return 61;
break;
case 23:return 37;
break;
case 24:return 46;
break;
case 25:return 17;
break;
case 26:return 42;
break;
case 27:return 43;
break;
case 28:return 58;
break;
case 29:return 59;
break;
case 30:return 67;
break;
case 31:return 68;
break;
case 32:return 23;
break;
case 33:return 28;
break;
case 34:return 25;
break;
case 35:return 26;
break;
case 36:return 64;
break;
case 37:return 63;
break;
case 38:return 70;
break;
case 39:return 69;
break;
case 40:return 65;
break;
case 41:return 71;
break;
case 42:return 76;
break;
case 43:return 77;
break;
case 44: yy_.yytext = yy_.yytext.substr(0,yy_.yyleng); return 75; /*//"*/ 
break;
case 45:return 73;
break;
case 46:return 74;
break;
case 47:return 31;
break;
case 48:
break;
case 49:
break;
case 50:return 5;
break;
case 51: 
		console.error('Error léxico: ' + yy_.yytext + ', line: ' + yy_.yylloc.first_line + ', column: ' + yy_.yylloc.first_column); 
	
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:public\b)/i,/^(?:static\b)/i,/^(?:main\b)/i,/^(?:class\b)/i,/^(?:interface\b)/i,/^(?:void\b)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:char\b)/i,/^(?:String\b)/i,/^(?:boolean\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:System\.out\.println\b)/i,/^(?:do\b)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:,)/i,/^(?:=)/i,/^(?:;)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:<)/i,/^(?:>)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:!)/i,/^(?:\^)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:"[^\"]*")/i,/^(?:[0-9]+\.[0-9]+)/i,/^(?:[0-9]+)/i,/^(?:([a-zA-Z_])[a-zA-Z0-9_]*)/i,/^(?:[ \r\t]+)/i,/^(?:\n)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}